import numpy as np
from . import pyisopach
from pyMSHRF import pyisopach
pyMSHRF.version
pyMSHRF.version()
import pyMSHRF
pyMSHRF.version
pyMSHRF.`__version__`
pyMSHRF.__version__
from .HRF_calculator import HRF, RHRF
from .file_io import read_one_spectrum
260+20
249+30
spectrum = np.array([[191.09071, 14670.0], [124.05742, 3543.0], [141.09334, 6191.0]], dtype=np.float32)
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal"):
spectrum = np.array(spectrum,dtype=np.float64)
masses = spectrum[:,0]
intensities = spectrum[:,1]
if ax is None:
ax = plt.gca()
ax.scatter(masses, intensities, color=peak_color, marker='o')
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
if isinstance(grid, bool):
ax.grid(grid)
elif grid == 'major':
ax.grid(True, which='major')
elif grid == 'minor':
ax.grid(True, which='minor')
if grid in [True, 'major']:
ax.minorticks_on()
plt.show()
import matplotlib.pyplot as plt
from typing import Union
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal"):
spectrum = np.array(spectrum,dtype=np.float64)
masses = spectrum[:,0]
intensities = spectrum[:,1]
if ax is None:
ax = plt.gca()
ax.scatter(masses, intensities, color=peak_color, marker='o')
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
if isinstance(grid, bool):
ax.grid(grid)
elif grid == 'major':
ax.grid(True, which='major')
elif grid == 'minor':
ax.grid(True, which='minor')
if grid in [True, 'major']:
ax.minorticks_on()
plt.show()
plot_spectrum(spectrum)
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal"):
spectrum = np.array(spectrum,dtype=np.float64)
masses = spectrum[:,0]
intensities = spectrum[:,1]
if ax is None:
ax = plt.gca()
ax.plot(masses, intensities, color=peak_color, linewidth=1.0, marker="")
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
if isinstance(grid, bool):
ax.grid(grid)
elif grid == 'major':
ax.grid(True, which='major')
elif grid == 'minor':
ax.grid(True, which='minor')
if grid in [True, 'major']:
ax.minorticks_on()
plt.show()
plot_spectrum(spectrum)
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal"):
if ax is None:
ax = plt.gca()
spectrum = np.array(spectrum,dtype=np.float64)
masses = spectrum[:,0]
intensities = spectrum[:,1]
# Normalize intensities
max_intensity = np.max(intensities)
intensities = intensities / max_intensity
def make_stems():
"""Calculate where the stems of the spectrum peaks are going to be"""
x = np.zeros([2, mz.size], dtype="float")
y = np.zeros(x.shape)
x[:, :] = np.tile(mz, (2, 1))
y[1, :] = intensities
return x, y
x, y = make_stems()
ax.plot(x, y, color=peak_color, linewidth=1.0, marker="", **plt_kwargs)
# Configure grid lines
ax.xaxis.set_minor_locator(mticker.AutoLocator())
ax.yaxis.set_minor_locator(mticker.AutoLocator())
ax.xaxis.set_minor_locator(mticker.AutoMinorLocator())
ax.yaxis.set_minor_locator(mticker.AutoMinorLocator())
if grid in (True, "both", "major"):
ax.grid(visible=True, which="major", color="#9E9E9E", linewidth=0.2)
if grid in (True, "both", "minor"):
ax.grid(visible=True, which="minor", color="#9E9E9E", linewidth=0.2)
ax.set_axisbelow(True)
ax.tick_params(axis="both", which="both", labelsize="small")
y_ticks = ax.get_yticks()
ax.set_yticks(y_ticks[y_ticks <= 1.0])
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
ax.set_title("Spectrum")
return ax
plot_spectrum(spectrum)
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal"):
if ax is None:
ax = plt.gca()
spectrum = np.array(spectrum,dtype=np.float64)
mz = spectrum[:,0]
intensities = spectrum[:,1]
# Normalize intensities
max_intensity = np.max(intensities)
intensities = intensities / max_intensity
def make_stems():
"""Calculate where the stems of the spectrum peaks are going to be"""
x = np.zeros([2, mz.size], dtype="float")
y = np.zeros(x.shape)
x[:, :] = np.tile(mz, (2, 1))
y[1, :] = intensities
return x, y
x, y = make_stems()
ax.plot(x, y, color=peak_color, linewidth=1.0, marker="", **plt_kwargs)
# Configure grid lines
ax.xaxis.set_minor_locator(mticker.AutoLocator())
ax.yaxis.set_minor_locator(mticker.AutoLocator())
ax.xaxis.set_minor_locator(mticker.AutoMinorLocator())
ax.yaxis.set_minor_locator(mticker.AutoMinorLocator())
if grid in (True, "both", "major"):
ax.grid(visible=True, which="major", color="#9E9E9E", linewidth=0.2)
if grid in (True, "both", "minor"):
ax.grid(visible=True, which="minor", color="#9E9E9E", linewidth=0.2)
ax.set_axisbelow(True)
ax.tick_params(axis="both", which="both", labelsize="small")
y_ticks = ax.get_yticks()
ax.set_yticks(y_ticks[y_ticks <= 1.0])
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
ax.set_title("Spectrum")
return ax
plot_spectrum(spectrum)
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal",
**plt_kwargs) -> plt.Axes:
if ax is None:
ax = plt.gca()
spectrum = np.array(spectrum,dtype=np.float64)
mz = spectrum[:,0]
intensities = spectrum[:,1]
# Normalize intensities
max_intensity = np.max(intensities)
intensities = intensities / max_intensity
def make_stems():
"""Calculate where the stems of the spectrum peaks are going to be"""
x = np.zeros([2, mz.size], dtype="float")
y = np.zeros(x.shape)
x[:, :] = np.tile(mz, (2, 1))
y[1, :] = intensities
return x, y
x, y = make_stems()
ax.plot(x, y, color=peak_color, linewidth=1.0, marker="", **plt_kwargs)
# Configure grid lines
ax.xaxis.set_minor_locator(mticker.AutoLocator())
ax.yaxis.set_minor_locator(mticker.AutoLocator())
ax.xaxis.set_minor_locator(mticker.AutoMinorLocator())
ax.yaxis.set_minor_locator(mticker.AutoMinorLocator())
if grid in (True, "both", "major"):
ax.grid(visible=True, which="major", color="#9E9E9E", linewidth=0.2)
if grid in (True, "both", "minor"):
ax.grid(visible=True, which="minor", color="#9E9E9E", linewidth=0.2)
ax.set_axisbelow(True)
ax.tick_params(axis="both", which="both", labelsize="small")
y_ticks = ax.get_yticks()
ax.set_yticks(y_ticks[y_ticks <= 1.0])
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
ax.set_title("Spectrum")
return ax
plot(spectrum)
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
from typing import Union
plot(spectrum)
plot_spectrum(spectrum)
a <- plot_spectrum(spectrum)
a = plot_spectrum(spectrum)
a
def plot_spectrum(spectrum,
grid: Union[bool, str] = True,
ax: plt.Axes = None,
peak_color="teal",
**plt_kwargs) -> plt.Axes:
if ax is None:
ax = plt.gca()
spectrum = np.array(spectrum,dtype=np.float64)
mz = spectrum[:,0]
intensities = spectrum[:,1]
# Normalize intensities
max_intensity = np.max(intensities)
intensities = intensities / max_intensity
def make_stems():
"""Calculate where the stems of the spectrum peaks are going to be"""
x = np.zeros([2, mz.size], dtype="float")
y = np.zeros(x.shape)
x[:, :] = np.tile(mz, (2, 1))
y[1, :] = intensities
return x, y
x, y = make_stems()
ax.plot(x, y, color=peak_color, linewidth=1.0, marker="", **plt_kwargs)
# Configure grid lines
ax.xaxis.set_minor_locator(mticker.AutoLocator())
ax.yaxis.set_minor_locator(mticker.AutoLocator())
ax.xaxis.set_minor_locator(mticker.AutoMinorLocator())
ax.yaxis.set_minor_locator(mticker.AutoMinorLocator())
if grid in (True, "both", "major"):
ax.grid(visible=True, which="major", color="#9E9E9E", linewidth=0.2)
if grid in (True, "both", "minor"):
ax.grid(visible=True, which="minor", color="#9E9E9E", linewidth=0.2)
ax.set_axisbelow(True)
ax.tick_params(axis="both", which="both", labelsize="small")
y_ticks = ax.get_yticks()
ax.set_yticks(y_ticks[y_ticks <= 1.0])
ax.set_xlabel("m/z", style="italic")
ax.set_ylabel("Intensity")
ax.set_title("Spectrum")
plt.show()
return ax
plot_spectrum(spectrum)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
formula = 'C5H7N3O2'
peaks_query = np.array([[191.09071, 14670.0], [124.05742, 3543.0], [141.09334, 6191.0]], dtype = np.float32)
peaks_query = np.array([[191.09071, 14670.0], [124.05742, 3543.0], [141.09334, 6191.0]], dtype = np.float32)
```
reticulate::repl_python()
